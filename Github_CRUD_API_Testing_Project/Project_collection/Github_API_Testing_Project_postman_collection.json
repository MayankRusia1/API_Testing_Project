{
	"info": {
		"_postman_id": "738e3721-d419-49d7-8c32-faf9f4817ec1",
		"name": "Github_API_Testing_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38456938",
		"_collection_link": "https://dark-escape-7958.postman.co/workspace/GITHUB_project~1b3ced91-ef9f-4205-acf4-95e596f2a964/collection/38456938-738e3721-d419-49d7-8c32-faf9f4817ec1?action=share&source=collection_link&creator=38456938"
	},
	"item": [
		{
			"name": "Method_Chaining_1",
			"item": [
				{
					"name": "Validate data consistency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'No Content\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									" pm.execution.setNextRequest(\"Request_chaining1_with_Validate_data_consistency_method\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/false",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"false"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request_chaining1_with_Validate_data_consistency_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"pm.execution.setNextRequest(null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/false",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"false"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Method_chaining_2",
			"item": [
				{
					"name": "Validate proper updation of data in repo reflect in server.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"New_Repo\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is updated repo\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);   \r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New_Repo\",\r\n    \"description\": \"This is updated repo\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{updating}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{updating}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request_chaining2_with_Validate proper updation of data in repo reflect in server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"New_Repo\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is updated repo\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);   \r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has 'OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{updatedRepoName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{updatedRepoName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "idempotency_of_DELETE_request",
			"item": [
				{
					"name": "API behaviour on making multiple DELETE request to server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'No Content'\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{idempotencyDELETE}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{idempotencyDELETE}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "idempotency_of_PATCH_request",
			"item": [
				{
					"name": "API behaviour on making multiple PATCH request to server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.description).to.eql(\"This is updated repo again\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"description\":\"This is updated repo again\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{idempotencyPATCH}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{idempotencyPATCH}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "idempotency_of_GET_request",
			"item": [
				{
					"name": "API behaviour on making multiple GET request to server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{idempotencyGET}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{idempotencyGET}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "idempotency_of_POST_request",
			"item": [
				{
					"name": "API behaviour on making multiple POST request to server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Created'\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unprocessable Entity'\", function () {\r",
									"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"dev_repo12300\",\r\n\"description\": \"This is new repo creating\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data_Integrity_Post_Operations",
			"item": [
				{
					"name": "patch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Hello-World123\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is newly updated repo123!\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"Hello-World123\",\r\n\"description\":\"This is newly updated repo123!\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/dev_repo1223",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"dev_repo1223"
							]
						}
					},
					"response": []
				},
				{
					"name": "get1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Hello-World123\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is newly updated repo123!\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/Hello-World123",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"Hello-World123"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'No Content'\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/Hello-World123",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"Hello-World123"
							]
						}
					},
					"response": []
				},
				{
					"name": "get2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/Hello-World123",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"Hello-World123"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All_Requests",
			"item": [
				{
					"name": "Create new repository with valid parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Created'\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"QA_fun_001\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is first repo created\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(true);\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"QA_fun_001\",\r\n\"description\":\"This is first repo created\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"      pm.expect(jsonData.name).to.eql(\"QA_fun_001\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is first repo created\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(true);\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{RepoName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{RepoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update repo details (description, privacy status) with valid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"      pm.expect(jsonData.name).to.eql(\"QA_fun_001\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is updated repo\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"QA_fun_001\",\r\n\"description\":\"This is updated repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{RepoName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{RepoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete existing repo with valid parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'No Content'\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{RepoName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{RepoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non-existing Repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{nonExisting_repo}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{nonExisting_repo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new repo without passing authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unauthorized'\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"QA_101\",\r\n\"description\":\"This is second repo created\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create existing repo again",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unprocessable Entity'\", function () {\r",
									"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"{{existingRepo}}\",\r\n\"description\":\"This is first repo created\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete existing repo with authentication, which has no scope of deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRU_github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo1}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch repo details which is not present in server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{nonExisting_repo}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{nonExisting_repo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch repo data using expired access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unauthorized'\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo1}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a repo without providing 'Name' to Repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unprocessable Entity'\", function () {\r",
									"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"description\":\"This-is-new-repo-created\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking character length limit for Repo Name_boundaryValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Testing-repo-created-using-POSTMAN-for-API-testing-to-understand-GitHub-usage-as-a-project-platform.\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is new repo created\");\r",
									"    pm.expect(jsonData.private).to.eql(true);\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Testing-repo-created-using-POSTMAN-for-API-testing-to-understand-GitHub-usage-as-project-platform-dd\",\r\n    \"description\": \"This is new repo created\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking character length limit for Repo Name_underLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"This-is-new-test-repo-made-from-POST-request\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is new repo created\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"This-is-new-test-repo-made-from-POST-request-dd\",\r\n    \"description\": \"This is new repo created\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking character length limit for Repo Name_beyondLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"This-is-new-testing-repo-created-from-POSTMAN-tool-using-POST-request-for-testing-purpose-and-to-get-understanding-about-API-testing-and-using-Github-as-project-for-it\",\r\n    \"description\": \"This is new repo created\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking data validations for the fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Bad Request'\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": false,\r\n    \"description\": 95642,\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": {\r\n        \"working\": \"field\",\"address\":45213\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "HTTP method validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Method Not Allowed'\", function () {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"{{existingRepo1}}\",\r\n\"description\":\"This is updated repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating non-existing repo data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"Github_repo_4526\",\r\n\"description\":\"This is updated repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{nonExisting_repo}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{nonExisting_repo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Handling of Content-Type Header Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unsupported Media Type'\", function () {\r",
									"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"dev_repo1223\",\r\n\"description\":\"This is new repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid input validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{invalidInputRepoName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{invalidInputRepoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking data format validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Bad Request'\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"dev_repo123,\r\n\"description\": false,\r\n\"homepage\":\"https://github.com\",\r\n\"private\":123\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new repo wiith invalid name (e.g: special characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unprocessable Entity'\", function () {\r",
									"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\": \"@#$%My@New**&^%%Repo!***\",\r\n\"description\":\"This is updated repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "wrong / invalid token format validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unauthorized'\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"name\":\"dev_repo12223\",\r\n\"description\": \"This is creating new repo\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate protocol for HTTP requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has 'OK'\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Tester234\");\r",
									"    pm.expect(jsonData.description).to.eql(\"This is second repo created\");\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"    pm.expect(jsonData.homepage).to.eql(\"https://github.com\");\r",
									"    pm.expect(jsonData.private).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://api.github.com/repos/MayankRusia1/{{existingRepo2}}",
							"protocol": "http",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"MayankRusia1",
								"{{existingRepo2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new repo providing only providing required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Created'\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body validation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"NewRepo_007-dd\");\r",
									"    pm.expect(jsonData.owner.login).to.eql(\"MayankRusia1\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"NewRepo_007-dd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "update repo without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Unauthorized'\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"QA_fun_001\",\r\n\"description\":\"This is your updated repo!\",\r\n\"homepage\":\"https://github.com\",\r\n\"private\":false,\r\n\"is_template\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo3}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update existing repo without passing required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\":\"Hello-World\",\r\n\"description\":\"This is updated repo!\",\r\n\"homepage\":\"https://github.com/\",\r\n\"private\": true,\r\n\"is_template\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete existing repo without providing authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Forbidden\", function () {\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo2}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete repo without passing repo name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CRUD_Github_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch repo details without passing authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo4}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update existing repo passing authentication, which doesnot have update permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"pm.test(\"Status code name has 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CR_github_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"QA_99\",\r\n    \"description\":\"This is updated repo\",\r\n    \"homepage\":\"https://www.github.com\",\r\n    \"private\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/repos/{{OwnerName}}/{{existingRepo3}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"repos",
								"{{OwnerName}}",
								"{{existingRepo3}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}